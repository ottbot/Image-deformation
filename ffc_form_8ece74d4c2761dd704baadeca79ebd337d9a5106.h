// This code conforms with the UFC specification version 2.0.0
// and was automatically generated by FFC version 1.0-beta.
// 
// This code was generated with the following parameters:
// 
//   cache_dir:                      ''
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   False
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   False
//   format:                         'ufc'
//   log_level:                      25
//   log_prefix:                     ''
//   name:                           'ffc'
//   no-evaluate_basis_derivatives:  True
//   optimize:                       False
//   output_dir:                     '.'
//   precision:                      15
//   quadrature_degree:              -1
//   quadrature_rule:                'auto'
//   representation:                 'auto'
//   split:                          False
//   swig_binary:                    'swig'
//   swig_path:                      ''

#ifndef __FFC_FORM_8ECE74D4C2761DD704BAADECA79EBD337D9A5106_H
#define __FFC_FORM_8ECE74D4C2761DD704BAADECA79EBD337D9A5106_H

#include <cmath>
#include <stdexcept>
#include <fstream>
#include <ufc.h>

/// This class defines the interface for a finite element.

class ffc_form_8ece74d4c2761dd704baadeca79ebd337d9a5106_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_8ece74d4c2761dd704baadeca79ebd337d9a5106_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_8ece74d4c2761dd704baadeca79ebd337d9a5106_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', Cell('interval', Space(1)), 2, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::interval;
  }

  /// Return the topological dimension of the cell shape
  virtual unsigned int topological_dimension() const
  {
    return 1;
  }

  /// Return the geometric dimension of the cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 1;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 3;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    
    // Compute determinant of Jacobian
    
    // Compute inverse of Jacobian
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (2.0*coordinates[0] - x[0][0] - x[1][0]) / J_00;
    
    // Reset values.
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = X;
      double tmp0 = 0.0;
      double tmp1 = 0.0;
      double tmp2 = 0.0;
      for (unsigned int r = 2; r < 3; r++)
      {
        tmp0 = 2.0*r*r*(2.0*r-2.0);
        tmp1 = 2.0*r*(2.0*r-1.0)*(2.0*r-2.0)/(2.0*r*r*(2.0*r-2.0));
        tmp2 = 4.0*r*(r-1.0)*(r-1.0)/(2.0*r*r*(2.0*r-2.0));
        basisvalues[r] = (X*basisvalues[r - 1]*tmp1 - basisvalues[r - 2]*tmp2);
      }// end loop over 'r'
      for (unsigned int r = 0; r < 3; r++)
      {
        basisvalues[r] *= std::sqrt((0.5 + r));
      }// end loop over 'r'
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.235702260395516, -0.408248290463863, 0.210818510677892};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = X;
      double tmp0 = 0.0;
      double tmp1 = 0.0;
      double tmp2 = 0.0;
      for (unsigned int r = 2; r < 3; r++)
      {
        tmp0 = 2.0*r*r*(2.0*r-2.0);
        tmp1 = 2.0*r*(2.0*r-1.0)*(2.0*r-2.0)/(2.0*r*r*(2.0*r-2.0));
        tmp2 = 4.0*r*(r-1.0)*(r-1.0)/(2.0*r*r*(2.0*r-2.0));
        basisvalues[r] = (X*basisvalues[r - 1]*tmp1 - basisvalues[r - 2]*tmp2);
      }// end loop over 'r'
      for (unsigned int r = 0; r < 3; r++)
      {
        basisvalues[r] *= std::sqrt((0.5 + r));
      }// end loop over 'r'
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.235702260395516, 0.408248290463863, 0.210818510677892};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = X;
      double tmp0 = 0.0;
      double tmp1 = 0.0;
      double tmp2 = 0.0;
      for (unsigned int r = 2; r < 3; r++)
      {
        tmp0 = 2.0*r*r*(2.0*r-2.0);
        tmp1 = 2.0*r*(2.0*r-1.0)*(2.0*r-2.0)/(2.0*r*r*(2.0*r-2.0));
        tmp2 = 4.0*r*(r-1.0)*(r-1.0)/(2.0*r*r*(2.0*r-2.0));
        basisvalues[r] = (X*basisvalues[r - 1]*tmp1 - basisvalues[r - 2]*tmp2);
      }// end loop over 'r'
      for (unsigned int r = 0; r < 3; r++)
      {
        basisvalues[r] *= std::sqrt((0.5 + r));
      }// end loop over 'r'
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.942809041582063, 0.0, -0.421637021355784};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis.
    for (unsigned int r = 0; r < 3; r++)
    {
      evaluate_basis(r, &dof_values, coordinates, c);
      values[r] = dof_values;
    }// end loop over 'r'
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 1;
    }// end loop over 'r'
    
    // Helper variable to hold values of a single dof.
    double *dof_values = new double[num_derivatives];
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      dof_values[r] = 0.0;
    }// end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 3; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, coordinates, c);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer.
    delete [] dof_values;
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[1];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = x[0][0];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = x[1][0];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = 0.5*x[0][0] + 0.5*x[1][0];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[1];
    const double * const * x = c.coordinates;
    y[0] = x[0][0];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = x[1][0];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = 0.5*x[0][0] + 0.5*x[1][0];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_8ece74d4c2761dd704baadeca79ebd337d9a5106_finite_element_0();
  }

};

/// This class defines the interface for a finite element.

class ffc_form_8ece74d4c2761dd704baadeca79ebd337d9a5106_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_8ece74d4c2761dd704baadeca79ebd337d9a5106_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_8ece74d4c2761dd704baadeca79ebd337d9a5106_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "VectorElement('Lagrange', Cell('interval', Space(1)), 2, 2, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::interval;
  }

  /// Return the topological dimension of the cell shape
  virtual unsigned int topological_dimension() const
  {
    return 1;
  }

  /// Return the geometric dimension of the cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 1;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 6;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 1;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return 2;
        break;
      }
    }
    
    return 0;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    
    // Compute determinant of Jacobian
    
    // Compute inverse of Jacobian
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (2.0*coordinates[0] - x[0][0] - x[1][0]) / J_00;
    
    // Reset values.
    values[0] = 0.0;
    values[1] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = X;
      double tmp0 = 0.0;
      double tmp1 = 0.0;
      double tmp2 = 0.0;
      for (unsigned int r = 2; r < 3; r++)
      {
        tmp0 = 2.0*r*r*(2.0*r-2.0);
        tmp1 = 2.0*r*(2.0*r-1.0)*(2.0*r-2.0)/(2.0*r*r*(2.0*r-2.0));
        tmp2 = 4.0*r*(r-1.0)*(r-1.0)/(2.0*r*r*(2.0*r-2.0));
        basisvalues[r] = (X*basisvalues[r - 1]*tmp1 - basisvalues[r - 2]*tmp2);
      }// end loop over 'r'
      for (unsigned int r = 0; r < 3; r++)
      {
        basisvalues[r] *= std::sqrt((0.5 + r));
      }// end loop over 'r'
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.235702260395516, -0.408248290463863, 0.210818510677892};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = X;
      double tmp0 = 0.0;
      double tmp1 = 0.0;
      double tmp2 = 0.0;
      for (unsigned int r = 2; r < 3; r++)
      {
        tmp0 = 2.0*r*r*(2.0*r-2.0);
        tmp1 = 2.0*r*(2.0*r-1.0)*(2.0*r-2.0)/(2.0*r*r*(2.0*r-2.0));
        tmp2 = 4.0*r*(r-1.0)*(r-1.0)/(2.0*r*r*(2.0*r-2.0));
        basisvalues[r] = (X*basisvalues[r - 1]*tmp1 - basisvalues[r - 2]*tmp2);
      }// end loop over 'r'
      for (unsigned int r = 0; r < 3; r++)
      {
        basisvalues[r] *= std::sqrt((0.5 + r));
      }// end loop over 'r'
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.235702260395516, 0.408248290463863, 0.210818510677892};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = X;
      double tmp0 = 0.0;
      double tmp1 = 0.0;
      double tmp2 = 0.0;
      for (unsigned int r = 2; r < 3; r++)
      {
        tmp0 = 2.0*r*r*(2.0*r-2.0);
        tmp1 = 2.0*r*(2.0*r-1.0)*(2.0*r-2.0)/(2.0*r*r*(2.0*r-2.0));
        tmp2 = 4.0*r*(r-1.0)*(r-1.0)/(2.0*r*r*(2.0*r-2.0));
        basisvalues[r] = (X*basisvalues[r - 1]*tmp1 - basisvalues[r - 2]*tmp2);
      }// end loop over 'r'
      for (unsigned int r = 0; r < 3; r++)
      {
        basisvalues[r] *= std::sqrt((0.5 + r));
      }// end loop over 'r'
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.942809041582063, 0.0, -0.421637021355784};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = X;
      double tmp0 = 0.0;
      double tmp1 = 0.0;
      double tmp2 = 0.0;
      for (unsigned int r = 2; r < 3; r++)
      {
        tmp0 = 2.0*r*r*(2.0*r-2.0);
        tmp1 = 2.0*r*(2.0*r-1.0)*(2.0*r-2.0)/(2.0*r*r*(2.0*r-2.0));
        tmp2 = 4.0*r*(r-1.0)*(r-1.0)/(2.0*r*r*(2.0*r-2.0));
        basisvalues[r] = (X*basisvalues[r - 1]*tmp1 - basisvalues[r - 2]*tmp2);
      }// end loop over 'r'
      for (unsigned int r = 0; r < 3; r++)
      {
        basisvalues[r] *= std::sqrt((0.5 + r));
      }// end loop over 'r'
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.235702260395516, -0.408248290463863, 0.210818510677892};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = X;
      double tmp0 = 0.0;
      double tmp1 = 0.0;
      double tmp2 = 0.0;
      for (unsigned int r = 2; r < 3; r++)
      {
        tmp0 = 2.0*r*r*(2.0*r-2.0);
        tmp1 = 2.0*r*(2.0*r-1.0)*(2.0*r-2.0)/(2.0*r*r*(2.0*r-2.0));
        tmp2 = 4.0*r*(r-1.0)*(r-1.0)/(2.0*r*r*(2.0*r-2.0));
        basisvalues[r] = (X*basisvalues[r - 1]*tmp1 - basisvalues[r - 2]*tmp2);
      }// end loop over 'r'
      for (unsigned int r = 0; r < 3; r++)
      {
        basisvalues[r] *= std::sqrt((0.5 + r));
      }// end loop over 'r'
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.235702260395516, 0.408248290463863, 0.210818510677892};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = X;
      double tmp0 = 0.0;
      double tmp1 = 0.0;
      double tmp2 = 0.0;
      for (unsigned int r = 2; r < 3; r++)
      {
        tmp0 = 2.0*r*r*(2.0*r-2.0);
        tmp1 = 2.0*r*(2.0*r-1.0)*(2.0*r-2.0)/(2.0*r*r*(2.0*r-2.0));
        tmp2 = 4.0*r*(r-1.0)*(r-1.0)/(2.0*r*r*(2.0*r-2.0));
        basisvalues[r] = (X*basisvalues[r - 1]*tmp1 - basisvalues[r - 2]*tmp2);
      }// end loop over 'r'
      for (unsigned int r = 0; r < 3; r++)
      {
        basisvalues[r] *= std::sqrt((0.5 + r));
      }// end loop over 'r'
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.942809041582063, 0.0, -0.421637021355784};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {0.0, 0.0};
    
    // Loop dofs and call evaluate_basis.
    for (unsigned int r = 0; r < 6; r++)
    {
      evaluate_basis(r, dof_values, coordinates, c);
      for (unsigned int s = 0; s < 2; s++)
      {
        values[r*2 + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 1;
    }// end loop over 'r'
    
    // Helper variable to hold values of a single dof.
    double *dof_values = new double[2*num_derivatives];
    for (unsigned int r = 0; r < 2*num_derivatives; r++)
    {
      dof_values[r] = 0.0;
    }// end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 6; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, coordinates, c);
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer.
    delete [] dof_values;
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[2];
    
    // Declare variable for physical coordinates.
    double y[1];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = x[0][0];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = x[1][0];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = 0.5*x[0][0] + 0.5*x[1][0];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = x[0][0];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 4:
      {
        y[0] = x[1][0];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 5:
      {
        y[0] = 0.5*x[0][0] + 0.5*x[1][0];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[2];
    
    // Declare variable for physical coordinates.
    double y[1];
    const double * const * x = c.coordinates;
    y[0] = x[0][0];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = x[1][0];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = 0.5*x[0][0] + 0.5*x[1][0];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = x[0][0];
    f.evaluate(vals, y, c);
    values[3] = vals[1];
    y[0] = x[1][0];
    f.evaluate(vals, y, c);
    values[4] = vals[1];
    y[0] = 0.5*x[0][0] + 0.5*x[1][0];
    f.evaluate(vals, y, c);
    values[5] = vals[1];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[3];
    vertex_values[3] = dof_values[4];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 2;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_8ece74d4c2761dd704baadeca79ebd337d9a5106_finite_element_0();
        break;
      }
    case 1:
      {
        return new ffc_form_8ece74d4c2761dd704baadeca79ebd337d9a5106_finite_element_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_8ece74d4c2761dd704baadeca79ebd337d9a5106_finite_element_1();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_8ece74d4c2761dd704baadeca79ebd337d9a5106_dofmap_0: public ufc::dofmap
{
private:

  unsigned int _global_dimension;
public:

  /// Constructor
  ffc_form_8ece74d4c2761dd704baadeca79ebd337d9a5106_dofmap_0() : ufc::dofmap()
  {
    _global_dimension = 0;
  }

  /// Destructor
  virtual ~ffc_form_8ece74d4c2761dd704baadeca79ebd337d9a5106_dofmap_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Lagrange', Cell('interval', Space(1)), 2, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    }
    
    return false;
  }

  /// Initialize dofmap for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    _global_dimension = m.num_entities[0] + m.num_entities[1];
    return false;
  }

  /// Initialize dofmap for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dofmap for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the topological dimension of the associated cell shape
  virtual unsigned int topological_dimension() const
  {
    return 1;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 1;
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return _global_dimension;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 3;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 3;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 1;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 1;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    offset += m.num_entities[0];
    dofs[2] = offset + c.entity_indices[1][0];
    offset += m.num_entities[1];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 0;
        break;
      }
    case 1:
      {
        dofs[0] = 1;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    if (d > 1)
    {
    throw std::runtime_error("d is larger than dimension (1)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 1)
      {
      throw std::runtime_error("i is larger than number of entities (1)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 2;
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = x[0][0];
    coordinates[1][0] = x[1][0];
    coordinates[2][0] = 0.5*x[0][0] + 0.5*x[1][0];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual unsigned int num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(unsigned int i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_8ece74d4c2761dd704baadeca79ebd337d9a5106_dofmap_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_8ece74d4c2761dd704baadeca79ebd337d9a5106_dofmap_1: public ufc::dofmap
{
private:

  unsigned int _global_dimension;
public:

  /// Constructor
  ffc_form_8ece74d4c2761dd704baadeca79ebd337d9a5106_dofmap_1() : ufc::dofmap()
  {
    _global_dimension = 0;
  }

  /// Destructor
  virtual ~ffc_form_8ece74d4c2761dd704baadeca79ebd337d9a5106_dofmap_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for VectorElement('Lagrange', Cell('interval', Space(1)), 2, 2, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    }
    
    return false;
  }

  /// Initialize dofmap for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    _global_dimension = 2.0*m.num_entities[0] + 2.0*m.num_entities[1];
    return false;
  }

  /// Initialize dofmap for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dofmap for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the topological dimension of the associated cell shape
  virtual unsigned int topological_dimension() const
  {
    return 1;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 1;
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return _global_dimension;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 6;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 6;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 2;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return 2;
        break;
      }
    case 1:
      {
        return 2;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    offset += m.num_entities[0];
    dofs[2] = offset + c.entity_indices[1][0];
    offset += m.num_entities[1];
    dofs[3] = offset + c.entity_indices[0][0];
    dofs[4] = offset + c.entity_indices[0][1];
    offset += m.num_entities[0];
    dofs[5] = offset + c.entity_indices[1][0];
    offset += m.num_entities[1];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 0;
      dofs[1] = 3;
        break;
      }
    case 1:
      {
        dofs[0] = 1;
      dofs[1] = 4;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    if (d > 1)
    {
    throw std::runtime_error("d is larger than dimension (1)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 1)
      {
      throw std::runtime_error("i is larger than number of entities (1)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 3;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 4;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 2;
      dofs[1] = 5;
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = x[0][0];
    coordinates[1][0] = x[1][0];
    coordinates[2][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[3][0] = x[0][0];
    coordinates[4][0] = x[1][0];
    coordinates[5][0] = 0.5*x[0][0] + 0.5*x[1][0];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual unsigned int num_sub_dofmaps() const
  {
    return 2;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_8ece74d4c2761dd704baadeca79ebd337d9a5106_dofmap_0();
        break;
      }
    case 1:
      {
        return new ffc_form_8ece74d4c2761dd704baadeca79ebd337d9a5106_dofmap_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_8ece74d4c2761dd704baadeca79ebd337d9a5106_dofmap_1();
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class ffc_form_8ece74d4c2761dd704baadeca79ebd337d9a5106_cell_integral_0_0: public ufc::cell_integral
{
public:

  /// Constructor
  ffc_form_8ece74d4c2761dd704baadeca79ebd337d9a5106_cell_integral_0_0() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_8ece74d4c2761dd704baadeca79ebd337d9a5106_cell_integral_0_0()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    
    // Compute determinant of Jacobian
    const double detJ =  J_00;
    
    // Compute inverse of Jacobian
    const double K_00 =  1.0 / detJ;
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Cell Volume.
    
    // Compute circumradius, in 1D it is equal to the cell volume.
    
    // Array of quadrature weights.
    static const double W12[12] = {0.0235876681933046, 0.0534696629977699, 0.0800391642718388, 0.101583713361743, 0.116746268269419, 0.124573522906959, 0.124573522906959, 0.116746268269419, 0.101583713361743, 0.0800391642718388, 0.0534696629977699, 0.0235876681933046};
    // Quadrature points on the UFC reference element: (0.00921968287664038), (0.0479413718147626), (0.115048662902848), (0.206341022856691), (0.31608425050091), (0.437383295744266), (0.562616704255734), (0.68391574949909), (0.793658977143308), (0.884951337097152), (0.952058628185237), (0.99078031712336)
    
    // Value of basis functions at quadrature points.
    static const double FE0_C0[12][6] = \
    {{0.97251095647477, -0.00904967777194876, 0.0365387212971783, 0.0, 0.0, 0.0},
    {0.860772634818675, -0.0433446215518, 0.182571986733125, 0.0, 0.0, 0.0},
    {0.681326400962923, -0.0885762732313816, 0.407249872268458, 0.0, 0.0, 0.0},
    {0.466130166857017, -0.1211877874296, 0.655057620572583, 0.0, 0.0, 0.0},
    {0.251565755326714, -0.116265743671466, 0.864699988344752, 0.0, 0.0, 0.0},
    {0.0704584075594346, -0.0547750009520343, 0.9843165933926, 0.0, 0.0, 0.0},
    {-0.0547750009520342, 0.0704584075594346, 0.9843165933926, 0.0, 0.0, 0.0},
    {-0.116265743671466, 0.251565755326714, 0.864699988344752, 0.0, 0.0, 0.0},
    {-0.1211877874296, 0.466130166857017, 0.655057620572583, 0.0, 0.0, 0.0},
    {-0.0885762732313816, 0.681326400962923, 0.407249872268458, 0.0, 0.0, 0.0},
    {-0.0433446215518, 0.860772634818675, 0.182571986733125, 0.0, 0.0, 0.0},
    {-0.00904967777194882, 0.97251095647477, 0.0365387212971785, 0.0, 0.0, 0.0}};
    
    static const double FE0_C0_D1[12][6] = \
    {{-2.96312126849344, -0.963121268493438, 3.92624253698688, 0.0, 0.0, 0.0},
    {-2.80823451274095, -0.808234512740949, 3.6164690254819, 0.0, 0.0, 0.0},
    {-2.53980534838861, -0.539805348388609, 3.07961069677722, 0.0, 0.0, 0.0},
    {-2.17463590857324, -0.174635908573235, 2.34927181714647, 0.0, 0.0, 0.0},
    {-1.73566299799636, 0.26433700200364, 1.47132599599272, 0.0, 0.0, 0.0},
    {-1.25046681702294, 0.749533182977062, 0.500933634045876, 0.0, 0.0, 0.0},
    {-0.749533182977063, 1.25046681702294, -0.500933634045875, 0.0, 0.0, 0.0},
    {-0.26433700200364, 1.73566299799636, -1.47132599599272, 0.0, 0.0, 0.0},
    {0.174635908573234, 2.17463590857323, -2.34927181714647, 0.0, 0.0, 0.0},
    {0.539805348388609, 2.53980534838861, -3.07961069677722, 0.0, 0.0, 0.0},
    {0.80823451274095, 2.80823451274095, -3.6164690254819, 0.0, 0.0, 0.0},
    {0.963121268493438, 2.96312126849344, -3.92624253698688, 0.0, 0.0, 0.0}};
    
    static const double FE0_C1[12][6] = \
    {{0.0, 0.0, 0.0, 0.97251095647477, -0.00904967777194876, 0.0365387212971783},
    {0.0, 0.0, 0.0, 0.860772634818675, -0.0433446215518, 0.182571986733125},
    {0.0, 0.0, 0.0, 0.681326400962923, -0.0885762732313816, 0.407249872268458},
    {0.0, 0.0, 0.0, 0.466130166857017, -0.1211877874296, 0.655057620572583},
    {0.0, 0.0, 0.0, 0.251565755326714, -0.116265743671466, 0.864699988344752},
    {0.0, 0.0, 0.0, 0.0704584075594346, -0.0547750009520343, 0.9843165933926},
    {0.0, 0.0, 0.0, -0.0547750009520342, 0.0704584075594346, 0.9843165933926},
    {0.0, 0.0, 0.0, -0.116265743671466, 0.251565755326714, 0.864699988344752},
    {0.0, 0.0, 0.0, -0.1211877874296, 0.466130166857017, 0.655057620572583},
    {0.0, 0.0, 0.0, -0.0885762732313816, 0.681326400962923, 0.407249872268458},
    {0.0, 0.0, 0.0, -0.0433446215518, 0.860772634818675, 0.182571986733125},
    {0.0, 0.0, 0.0, -0.00904967777194882, 0.97251095647477, 0.0365387212971785}};
    
    static const double FE0_C1_D1[12][6] = \
    {{0.0, 0.0, 0.0, -2.96312126849344, -0.963121268493438, 3.92624253698688},
    {0.0, 0.0, 0.0, -2.80823451274095, -0.808234512740949, 3.6164690254819},
    {0.0, 0.0, 0.0, -2.53980534838861, -0.539805348388609, 3.07961069677722},
    {0.0, 0.0, 0.0, -2.17463590857324, -0.174635908573235, 2.34927181714647},
    {0.0, 0.0, 0.0, -1.73566299799636, 0.26433700200364, 1.47132599599272},
    {0.0, 0.0, 0.0, -1.25046681702294, 0.749533182977062, 0.500933634045876},
    {0.0, 0.0, 0.0, -0.749533182977063, 1.25046681702294, -0.500933634045875},
    {0.0, 0.0, 0.0, -0.26433700200364, 1.73566299799636, -1.47132599599272},
    {0.0, 0.0, 0.0, 0.174635908573234, 2.17463590857323, -2.34927181714647},
    {0.0, 0.0, 0.0, 0.539805348388609, 2.53980534838861, -3.07961069677722},
    {0.0, 0.0, 0.0, 0.80823451274095, 2.80823451274095, -3.6164690254819},
    {0.0, 0.0, 0.0, 0.963121268493438, 2.96312126849344, -3.92624253698688}};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 6; r++)
    {
      A[r] = 0.0;
    }// end loop over 'r'
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', False), ('ignore ones', False), ('ignore zero tables', False), ('optimisation', False), ('remove zero terms', False)
    
    // Loop quadrature points for integral.
    // Number of operations to compute element tensor for following IP loop = 9936
    for (unsigned int ip = 0; ip < 12; ip++)
    {
      
      // Coefficient declarations.
      double F0 = 0.0;
      double F1 = 0.0;
      double F2 = 0.0;
      double F3 = 0.0;
      double F4 = 0.0;
      double F5 = 0.0;
      double F6 = 0.0;
      double F7 = 0.0;
      
      // Total number of operations to compute function values = 96
      for (unsigned int r = 0; r < 6; r++)
      {
        F0 += FE0_C0[ip][r]*w[0][r];
        F1 += FE0_C1[ip][r]*w[0][r];
        F2 += FE0_C0[ip][r]*w[1][r];
        F3 += FE0_C1[ip][r]*w[1][r];
        F4 += FE0_C0_D1[ip][r]*w[2][r];
        F5 += FE0_C1_D1[ip][r]*w[2][r];
        F6 += FE0_C0_D1[ip][r]*w[1][r];
        F7 += FE0_C1_D1[ip][r]*w[1][r];
      }// end loop over 'r'
      
      // Number of operations for primary indices: 732
      for (unsigned int j = 0; j < 6; j++)
      {
        // Number of operations to compute entry: 122
        A[j] += (((((K_00*FE0_C1_D1[ip][j]*(0.5*(((F3*F3 + F2*F2)/(std::sqrt((K_00*F4*K_00*F4 + K_00*F5*K_00*F5))) + (-1.0)*((1e-06)*((std::sqrt((K_00*F6*K_00*F6 + K_00*F7*K_00*F7)))*(std::sqrt((K_00*F6*K_00*F6 + K_00*F7*K_00*F7))))/((std::sqrt((K_00*F4*K_00*F4 + K_00*F5*K_00*F5)))*(std::sqrt((K_00*F4*K_00*F4 + K_00*F5*K_00*F5)))*(std::sqrt((K_00*F4*K_00*F4 + K_00*F5*K_00*F5)))))))))*K_00*F5 + (K_00*FE0_C0_D1[ip][j]*(0.5*(((F3*F3 + F2*F2)/(std::sqrt((K_00*F4*K_00*F4 + K_00*F5*K_00*F5))) + (-1.0)*((1e-06)*((std::sqrt((K_00*F6*K_00*F6 + K_00*F7*K_00*F7)))*(std::sqrt((K_00*F6*K_00*F6 + K_00*F7*K_00*F7))))/((std::sqrt((K_00*F4*K_00*F4 + K_00*F5*K_00*F5)))*(std::sqrt((K_00*F4*K_00*F4 + K_00*F5*K_00*F5)))*(std::sqrt((K_00*F4*K_00*F4 + K_00*F5*K_00*F5)))))))))*K_00*F4))*0.005)*(-1.0) + (FE0_C0[ip][j]*F0 + FE0_C1[ip][j]*F1))*W12[ip]*det;
      }// end loop over 'j'
    }// end loop over 'ip'
  }

  /// Tabulate the tensor for the contribution from a local cell
  /// using the specified reference cell quadrature points/weights
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c,
                               unsigned int num_quadrature_points,
                               const double * const * quadrature_points,
                               const double* quadrature_weights) const
  {
    throw std::runtime_error("Quadrature version of tabulate_tensor not yet implemented (introduced in UFC 2.0).");
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class ffc_form_8ece74d4c2761dd704baadeca79ebd337d9a5106_form_0: public ufc::form
{
public:

  /// Constructor
  ffc_form_8ece74d4c2761dd704baadeca79ebd337d9a5106_form_0() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_8ece74d4c2761dd704baadeca79ebd337d9a5106_form_0()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "Form([Integral(Sum(IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('interval', Space(1)), 2, 2, None), 0), MultiIndex((Index(0),), {Index(0): 2})), Indexed(Coefficient(VectorElement('Lagrange', Cell('interval', Space(1)), 2, 2, None), 0), MultiIndex((Index(0),), {Index(0): 2}))), MultiIndex((Index(0),), {Index(0): 2})), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.005, (), (), {}), IndexSum(Product(Indexed(ComponentTensor(Product(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('interval', Space(1)), 2, 2, None), 0), MultiIndex((FixedIndex(0),), {})), MultiIndex((Index(1),), {Index(1): 2})), Product(FloatValue(0.5, (), (), {}), Sum(Division(IndexSum(Product(Indexed(Coefficient(VectorElement('Lagrange', Cell('interval', Space(1)), 2, 2, None), 1), MultiIndex((Index(2),), {Index(2): 2})), Indexed(Coefficient(VectorElement('Lagrange', Cell('interval', Space(1)), 2, 2, None), 1), MultiIndex((Index(2),), {Index(2): 2}))), MultiIndex((Index(2),), {Index(2): 2})), sqrt(IndexSum(Product(Indexed(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('interval', Space(1)), 2, 2, None), 2), MultiIndex((FixedIndex(0),), {})), MultiIndex((Index(3),), {Index(3): 2})), Indexed(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('interval', Space(1)), 2, 2, None), 2), MultiIndex((FixedIndex(0),), {})), MultiIndex((Index(3),), {Index(3): 2}))), MultiIndex((Index(3),), {Index(3): 2})))), Product(IntValue(-1, (), (), {}), Division(Product(FloatValue(1e-06, (), (), {}), Power(sqrt(IndexSum(Product(Indexed(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('interval', Space(1)), 2, 2, None), 1), MultiIndex((FixedIndex(0),), {})), MultiIndex((Index(4),), {Index(4): 2})), Indexed(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('interval', Space(1)), 2, 2, None), 1), MultiIndex((FixedIndex(0),), {})), MultiIndex((Index(4),), {Index(4): 2}))), MultiIndex((Index(4),), {Index(4): 2}))), IntValue(2, (), (), {}))), Power(sqrt(IndexSum(Product(Indexed(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('interval', Space(1)), 2, 2, None), 2), MultiIndex((FixedIndex(0),), {})), MultiIndex((Index(5),), {Index(5): 2})), Indexed(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('interval', Space(1)), 2, 2, None), 2), MultiIndex((FixedIndex(0),), {})), MultiIndex((Index(5),), {Index(5): 2}))), MultiIndex((Index(5),), {Index(5): 2}))), IntValue(3, (), (), {}))))))), MultiIndex((Index(1),), {Index(1): 2})), MultiIndex((Index(6),), {Index(6): 2})), Indexed(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('interval', Space(1)), 2, 2, None), 2), MultiIndex((FixedIndex(0),), {})), MultiIndex((Index(6),), {Index(6): 2}))), MultiIndex((Index(6),), {Index(6): 2}))))), Measure('cell', 0, None))])";
  }

  /// Return the rank of the global tensor (r)
  virtual unsigned int rank() const
  {
    return 1;
  }

  /// Return the number of coefficients (n)
  virtual unsigned int num_coefficients() const
  {
    return 3;
  }

  /// Return the number of cell domains
  virtual unsigned int num_cell_domains() const
  {
    return 1;
  }

  /// Return the number of exterior facet domains
  virtual unsigned int num_exterior_facet_domains() const
  {
    return 0;
  }

  /// Return the number of interior facet domains
  virtual unsigned int num_interior_facet_domains() const
  {
    return 0;
  }

  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_8ece74d4c2761dd704baadeca79ebd337d9a5106_finite_element_1();
        break;
      }
    case 1:
      {
        return new ffc_form_8ece74d4c2761dd704baadeca79ebd337d9a5106_finite_element_1();
        break;
      }
    case 2:
      {
        return new ffc_form_8ece74d4c2761dd704baadeca79ebd337d9a5106_finite_element_1();
        break;
      }
    case 3:
      {
        return new ffc_form_8ece74d4c2761dd704baadeca79ebd337d9a5106_finite_element_1();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new dofmap for argument function i
  virtual ufc::dofmap* create_dofmap(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_8ece74d4c2761dd704baadeca79ebd337d9a5106_dofmap_1();
        break;
      }
    case 1:
      {
        return new ffc_form_8ece74d4c2761dd704baadeca79ebd337d9a5106_dofmap_1();
        break;
      }
    case 2:
      {
        return new ffc_form_8ece74d4c2761dd704baadeca79ebd337d9a5106_dofmap_1();
        break;
      }
    case 3:
      {
        return new ffc_form_8ece74d4c2761dd704baadeca79ebd337d9a5106_dofmap_1();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_8ece74d4c2761dd704baadeca79ebd337d9a5106_cell_integral_0_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(unsigned int i) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(unsigned int i) const
  {
    return 0;
  }

};

#endif
